stages:
  - test
  - deploy
  - build

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  UV_CACHE_DIR: "$CI_PROJECT_DIR/.cache/uv"

cache: &global_cache
  paths:
  - .mypy_cache
  - .ruff_cache
  - .cache/pip
  - .cache/uv

test-all:
  parallel:
    matrix:
      - PYTHON_VERSION:
        - '3.10'
        - '3.11'
        - '3.12'
        - '3.13'
  cache:
    <<: *global_cache
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
  image: python:$PYTHON_VERSION
  stage: test
  script:
  - python --version
  - pip -V
  - python -m venv ENV
  - source ENV/bin/activate
  - pip install uv
  - uv pip install -r ci-requirements.txt
  - ruff check --exclude="ENV" .
  - mypy core pandabackup viewer
  - bash ./set_db_engine.sh
  - python manage.py migrate
  - python manage.py test --noinput viewer.tests.test_internal viewer.tests.test_core
  tags:
    - django
    - panda
  artifacts:
    when: always
    paths:
      - test-results/TEST-*.xml
    reports:
      junit: test-results/TEST-*.xml

build:
  image: docker:28.2.2
  when: manual
  services:
    - docker:28.2.2-dind
  before_script:
    - docker info
  stage: build
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
    DOCKER_TLS_CERTDIR: "/certs"
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
    - docker build -t $IMAGE_TAG .
    - docker push $IMAGE_TAG
